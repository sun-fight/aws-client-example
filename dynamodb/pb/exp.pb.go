// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: exp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumExpValType int32

const (
	EnumExpValType_ValTypeNone EnumExpValType = 0
	EnumExpValType_ValTypeI64  EnumExpValType = 2
	EnumExpValType_ValTypeStr  EnumExpValType = 3
)

// Enum value maps for EnumExpValType.
var (
	EnumExpValType_name = map[int32]string{
		0: "ValTypeNone",
		2: "ValTypeI64",
		3: "ValTypeStr",
	}
	EnumExpValType_value = map[string]int32{
		"ValTypeNone": 0,
		"ValTypeI64":  2,
		"ValTypeStr":  3,
	}
)

func (x EnumExpValType) Enum() *EnumExpValType {
	p := new(EnumExpValType)
	*p = x
	return p
}

func (x EnumExpValType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumExpValType) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_proto_enumTypes[0].Descriptor()
}

func (EnumExpValType) Type() protoreflect.EnumType {
	return &file_exp_proto_enumTypes[0]
}

func (x EnumExpValType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumExpValType.Descriptor instead.
func (EnumExpValType) EnumDescriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{0}
}

type EnumExpUpdateOperationMode int32

const (
	EnumExpUpdateOperationMode_OperationModeNone   EnumExpUpdateOperationMode = 0
	EnumExpUpdateOperationMode_OperationModeAdd    EnumExpUpdateOperationMode = 1
	EnumExpUpdateOperationMode_OperationModeSet    EnumExpUpdateOperationMode = 2
	EnumExpUpdateOperationMode_OperationModeRemove EnumExpUpdateOperationMode = 3
	EnumExpUpdateOperationMode_OperationModeDelete EnumExpUpdateOperationMode = 4
)

// Enum value maps for EnumExpUpdateOperationMode.
var (
	EnumExpUpdateOperationMode_name = map[int32]string{
		0: "OperationModeNone",
		1: "OperationModeAdd",
		2: "OperationModeSet",
		3: "OperationModeRemove",
		4: "OperationModeDelete",
	}
	EnumExpUpdateOperationMode_value = map[string]int32{
		"OperationModeNone":   0,
		"OperationModeAdd":    1,
		"OperationModeSet":    2,
		"OperationModeRemove": 3,
		"OperationModeDelete": 4,
	}
)

func (x EnumExpUpdateOperationMode) Enum() *EnumExpUpdateOperationMode {
	p := new(EnumExpUpdateOperationMode)
	*p = x
	return p
}

func (x EnumExpUpdateOperationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumExpUpdateOperationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_proto_enumTypes[1].Descriptor()
}

func (EnumExpUpdateOperationMode) Type() protoreflect.EnumType {
	return &file_exp_proto_enumTypes[1]
}

func (x EnumExpUpdateOperationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumExpUpdateOperationMode.Descriptor instead.
func (EnumExpUpdateOperationMode) EnumDescriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{1}
}

// setValueMode https://github.com/aws/aws-sdk-go-v2/blob/main/feature/dynamodb/expression/operand.go
// set value use special way
type EnumExpUpdateSetValMode int32

const (
	EnumExpUpdateSetValMode_SetValModeNone        EnumExpUpdateSetValMode = 0
	EnumExpUpdateSetValMode_SetValModePlus        EnumExpUpdateSetValMode = 1
	EnumExpUpdateSetValMode_SetValModeMinus       EnumExpUpdateSetValMode = 2
	EnumExpUpdateSetValMode_SetValModeListAppend  EnumExpUpdateSetValMode = 3
	EnumExpUpdateSetValMode_SetValModeIfNotExists EnumExpUpdateSetValMode = 4
)

// Enum value maps for EnumExpUpdateSetValMode.
var (
	EnumExpUpdateSetValMode_name = map[int32]string{
		0: "SetValModeNone",
		1: "SetValModePlus",
		2: "SetValModeMinus",
		3: "SetValModeListAppend",
		4: "SetValModeIfNotExists",
	}
	EnumExpUpdateSetValMode_value = map[string]int32{
		"SetValModeNone":        0,
		"SetValModePlus":        1,
		"SetValModeMinus":       2,
		"SetValModeListAppend":  3,
		"SetValModeIfNotExists": 4,
	}
)

func (x EnumExpUpdateSetValMode) Enum() *EnumExpUpdateSetValMode {
	p := new(EnumExpUpdateSetValMode)
	*p = x
	return p
}

func (x EnumExpUpdateSetValMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumExpUpdateSetValMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_proto_enumTypes[2].Descriptor()
}

func (EnumExpUpdateSetValMode) Type() protoreflect.EnumType {
	return &file_exp_proto_enumTypes[2]
}

func (x EnumExpUpdateSetValMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumExpUpdateSetValMode.Descriptor instead.
func (EnumExpUpdateSetValMode) EnumDescriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{2}
}

// conditionMode https://github.com/aws/aws-sdk-go-v2/blob/main/feature/dynamodb/expression/condition.go
type EnumExpLogicalMode int32

const (
	EnumExpLogicalMode_LogicalModeNone EnumExpLogicalMode = 0
	EnumExpLogicalMode_LogicalModeAnd  EnumExpLogicalMode = 1
	EnumExpLogicalMode_LogicalModeOr   EnumExpLogicalMode = 2
	EnumExpLogicalMode_LogicalModeNot  EnumExpLogicalMode = 3
)

// Enum value maps for EnumExpLogicalMode.
var (
	EnumExpLogicalMode_name = map[int32]string{
		0: "LogicalModeNone",
		1: "LogicalModeAnd",
		2: "LogicalModeOr",
		3: "LogicalModeNot",
	}
	EnumExpLogicalMode_value = map[string]int32{
		"LogicalModeNone": 0,
		"LogicalModeAnd":  1,
		"LogicalModeOr":   2,
		"LogicalModeNot":  3,
	}
)

func (x EnumExpLogicalMode) Enum() *EnumExpLogicalMode {
	p := new(EnumExpLogicalMode)
	*p = x
	return p
}

func (x EnumExpLogicalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumExpLogicalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_proto_enumTypes[3].Descriptor()
}

func (EnumExpLogicalMode) Type() protoreflect.EnumType {
	return &file_exp_proto_enumTypes[3]
}

func (x EnumExpLogicalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumExpLogicalMode.Descriptor instead.
func (EnumExpLogicalMode) EnumDescriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{3}
}

type EnumExpConditionMode int32

const (
	EnumExpConditionMode_ConditionModeNone             EnumExpConditionMode = 0
	EnumExpConditionMode_ConditionModeEqual            EnumExpConditionMode = 1
	EnumExpConditionMode_ConditionModeNotEqualCond     EnumExpConditionMode = 2
	EnumExpConditionMode_ConditionModeLessThan         EnumExpConditionMode = 3
	EnumExpConditionMode_ConditionModeLessThanEqual    EnumExpConditionMode = 4
	EnumExpConditionMode_ConditionModeGreaterThan      EnumExpConditionMode = 5
	EnumExpConditionMode_ConditionModeGreaterThanEqual EnumExpConditionMode = 6
	EnumExpConditionMode_ConditionModeAnd              EnumExpConditionMode = 7
	EnumExpConditionMode_ConditionModeOr               EnumExpConditionMode = 8
	EnumExpConditionMode_ConditionModeNot              EnumExpConditionMode = 9
	EnumExpConditionMode_ConditionModeBetween          EnumExpConditionMode = 10
	EnumExpConditionMode_ConditionModeIn               EnumExpConditionMode = 11
	EnumExpConditionMode_ConditionModeAttrExists       EnumExpConditionMode = 12
	EnumExpConditionMode_ConditionModeAttrNotExists    EnumExpConditionMode = 13
	EnumExpConditionMode_ConditionModeAttrType         EnumExpConditionMode = 14
	EnumExpConditionMode_ConditionModeBeginsWith       EnumExpConditionMode = 15
	EnumExpConditionMode_ConditionModeContains         EnumExpConditionMode = 16
)

// Enum value maps for EnumExpConditionMode.
var (
	EnumExpConditionMode_name = map[int32]string{
		0:  "ConditionModeNone",
		1:  "ConditionModeEqual",
		2:  "ConditionModeNotEqualCond",
		3:  "ConditionModeLessThan",
		4:  "ConditionModeLessThanEqual",
		5:  "ConditionModeGreaterThan",
		6:  "ConditionModeGreaterThanEqual",
		7:  "ConditionModeAnd",
		8:  "ConditionModeOr",
		9:  "ConditionModeNot",
		10: "ConditionModeBetween",
		11: "ConditionModeIn",
		12: "ConditionModeAttrExists",
		13: "ConditionModeAttrNotExists",
		14: "ConditionModeAttrType",
		15: "ConditionModeBeginsWith",
		16: "ConditionModeContains",
	}
	EnumExpConditionMode_value = map[string]int32{
		"ConditionModeNone":             0,
		"ConditionModeEqual":            1,
		"ConditionModeNotEqualCond":     2,
		"ConditionModeLessThan":         3,
		"ConditionModeLessThanEqual":    4,
		"ConditionModeGreaterThan":      5,
		"ConditionModeGreaterThanEqual": 6,
		"ConditionModeAnd":              7,
		"ConditionModeOr":               8,
		"ConditionModeNot":              9,
		"ConditionModeBetween":          10,
		"ConditionModeIn":               11,
		"ConditionModeAttrExists":       12,
		"ConditionModeAttrNotExists":    13,
		"ConditionModeAttrType":         14,
		"ConditionModeBeginsWith":       15,
		"ConditionModeContains":         16,
	}
)

func (x EnumExpConditionMode) Enum() *EnumExpConditionMode {
	p := new(EnumExpConditionMode)
	*p = x
	return p
}

func (x EnumExpConditionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumExpConditionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_proto_enumTypes[4].Descriptor()
}

func (EnumExpConditionMode) Type() protoreflect.EnumType {
	return &file_exp_proto_enumTypes[4]
}

func (x EnumExpConditionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumExpConditionMode.Descriptor instead.
func (EnumExpConditionMode) EnumDescriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{4}
}

type ExpUpdateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" dynamodbav:",omitempty"`
	SetValMode EnumExpUpdateSetValMode `protobuf:"varint,2,opt,name=SetValMode,proto3,enum=pb.EnumExpUpdateSetValMode" json:"SetValMode,omitempty" dynamodbav:",omitempty"`
	Value      string                  `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty" dynamodbav:",omitempty"`
	ValType    EnumExpValType          `protobuf:"varint,4,opt,name=ValType,proto3,enum=pb.EnumExpValType" json:"ValType,omitempty" dynamodbav:",omitempty"`
}

func (x *ExpUpdateSet) Reset() {
	*x = ExpUpdateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpUpdateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpUpdateSet) ProtoMessage() {}

func (x *ExpUpdateSet) ProtoReflect() protoreflect.Message {
	mi := &file_exp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpUpdateSet.ProtoReflect.Descriptor instead.
func (*ExpUpdateSet) Descriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{0}
}

func (x *ExpUpdateSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpUpdateSet) GetSetValMode() EnumExpUpdateSetValMode {
	if x != nil {
		return x.SetValMode
	}
	return EnumExpUpdateSetValMode_SetValModeNone
}

func (x *ExpUpdateSet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExpUpdateSet) GetValType() EnumExpValType {
	if x != nil {
		return x.ValType
	}
	return EnumExpValType_ValTypeNone
}

type ExpUpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationMode EnumExpUpdateOperationMode `protobuf:"varint,1,opt,name=OperationMode,proto3,enum=pb.EnumExpUpdateOperationMode" json:"OperationMode,omitempty" dynamodbav:",omitempty"`
	ExpUpdateSets []*ExpUpdateSet            `protobuf:"bytes,2,rep,name=ExpUpdateSets,proto3" json:"ExpUpdateSets,omitempty" dynamodbav:",omitempty"`
}

func (x *ExpUpdateItem) Reset() {
	*x = ExpUpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpUpdateItem) ProtoMessage() {}

func (x *ExpUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_exp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpUpdateItem.ProtoReflect.Descriptor instead.
func (*ExpUpdateItem) Descriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{1}
}

func (x *ExpUpdateItem) GetOperationMode() EnumExpUpdateOperationMode {
	if x != nil {
		return x.OperationMode
	}
	return EnumExpUpdateOperationMode_OperationModeNone
}

func (x *ExpUpdateItem) GetExpUpdateSets() []*ExpUpdateSet {
	if x != nil {
		return x.ExpUpdateSets
	}
	return nil
}

type ExpCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionMode EnumExpConditionMode `protobuf:"varint,1,opt,name=ConditionMode,proto3,enum=pb.EnumExpConditionMode" json:"ConditionMode,omitempty" dynamodbav:",omitempty"`
	LogicalMode   EnumExpLogicalMode   `protobuf:"varint,2,opt,name=LogicalMode,proto3,enum=pb.EnumExpLogicalMode" json:"LogicalMode,omitempty" dynamodbav:",omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" dynamodbav:",omitempty"`
	Value         string               `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty" dynamodbav:",omitempty"`
	ValType       EnumExpValType       `protobuf:"varint,5,opt,name=ValType,proto3,enum=pb.EnumExpValType" json:"ValType,omitempty" dynamodbav:",omitempty"`
}

func (x *ExpCondition) Reset() {
	*x = ExpCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpCondition) ProtoMessage() {}

func (x *ExpCondition) ProtoReflect() protoreflect.Message {
	mi := &file_exp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpCondition.ProtoReflect.Descriptor instead.
func (*ExpCondition) Descriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{2}
}

func (x *ExpCondition) GetConditionMode() EnumExpConditionMode {
	if x != nil {
		return x.ConditionMode
	}
	return EnumExpConditionMode_ConditionModeNone
}

func (x *ExpCondition) GetLogicalMode() EnumExpLogicalMode {
	if x != nil {
		return x.LogicalMode
	}
	return EnumExpLogicalMode_LogicalModeNone
}

func (x *ExpCondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExpCondition) GetValType() EnumExpValType {
	if x != nil {
		return x.ValType
	}
	return EnumExpValType_ValTypeNone
}

type UpdateCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpUpdateItems []*ExpUpdateItem `protobuf:"bytes,2,rep,name=ExpUpdateItems,proto3" json:"ExpUpdateItems,omitempty" dynamodbav:",omitempty"`
	ExpConditions  []*ExpCondition  `protobuf:"bytes,3,rep,name=ExpConditions,proto3" json:"ExpConditions,omitempty" dynamodbav:",omitempty"`
}

func (x *UpdateCondition) Reset() {
	*x = UpdateCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCondition) ProtoMessage() {}

func (x *UpdateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_exp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCondition.ProtoReflect.Descriptor instead.
func (*UpdateCondition) Descriptor() ([]byte, []int) {
	return file_exp_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCondition) GetExpUpdateItems() []*ExpUpdateItem {
	if x != nil {
		return x.ExpUpdateItems
	}
	return nil
}

func (x *UpdateCondition) GetExpConditions() []*ExpCondition {
	if x != nil {
		return x.ExpConditions
	}
	return nil
}

var File_exp_proto protoreflect.FileDescriptor

var file_exp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0xa3, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x78, 0x70, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x56, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x56, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e,
	0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a,
	0x41, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x36, 0x34,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x10, 0x03, 0x2a, 0x91, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x75, 0x6d, 0x45,
	0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x10, 0x04, 0x2a, 0x64, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x4f, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x10, 0x03, 0x2a, 0xe0, 0x03, 0x0a, 0x14, 0x45,
	0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6e,
	0x64, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x10, 0x09, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x10, 0x0b, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x10, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exp_proto_rawDescOnce sync.Once
	file_exp_proto_rawDescData = file_exp_proto_rawDesc
)

func file_exp_proto_rawDescGZIP() []byte {
	file_exp_proto_rawDescOnce.Do(func() {
		file_exp_proto_rawDescData = protoimpl.X.CompressGZIP(file_exp_proto_rawDescData)
	})
	return file_exp_proto_rawDescData
}

var file_exp_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_exp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_exp_proto_goTypes = []interface{}{
	(EnumExpValType)(0),             // 0: pb.EnumExpValType
	(EnumExpUpdateOperationMode)(0), // 1: pb.EnumExpUpdateOperationMode
	(EnumExpUpdateSetValMode)(0),    // 2: pb.EnumExpUpdateSetValMode
	(EnumExpLogicalMode)(0),         // 3: pb.EnumExpLogicalMode
	(EnumExpConditionMode)(0),       // 4: pb.EnumExpConditionMode
	(*ExpUpdateSet)(nil),            // 5: pb.ExpUpdateSet
	(*ExpUpdateItem)(nil),           // 6: pb.ExpUpdateItem
	(*ExpCondition)(nil),            // 7: pb.ExpCondition
	(*UpdateCondition)(nil),         // 8: pb.UpdateCondition
}
var file_exp_proto_depIdxs = []int32{
	2, // 0: pb.ExpUpdateSet.SetValMode:type_name -> pb.EnumExpUpdateSetValMode
	0, // 1: pb.ExpUpdateSet.ValType:type_name -> pb.EnumExpValType
	1, // 2: pb.ExpUpdateItem.OperationMode:type_name -> pb.EnumExpUpdateOperationMode
	5, // 3: pb.ExpUpdateItem.ExpUpdateSets:type_name -> pb.ExpUpdateSet
	4, // 4: pb.ExpCondition.ConditionMode:type_name -> pb.EnumExpConditionMode
	3, // 5: pb.ExpCondition.LogicalMode:type_name -> pb.EnumExpLogicalMode
	0, // 6: pb.ExpCondition.ValType:type_name -> pb.EnumExpValType
	6, // 7: pb.UpdateCondition.ExpUpdateItems:type_name -> pb.ExpUpdateItem
	7, // 8: pb.UpdateCondition.ExpConditions:type_name -> pb.ExpCondition
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_exp_proto_init() }
func file_exp_proto_init() {
	if File_exp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpUpdateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpUpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exp_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exp_proto_goTypes,
		DependencyIndexes: file_exp_proto_depIdxs,
		EnumInfos:         file_exp_proto_enumTypes,
		MessageInfos:      file_exp_proto_msgTypes,
	}.Build()
	File_exp_proto = out.File
	file_exp_proto_rawDesc = nil
	file_exp_proto_goTypes = nil
	file_exp_proto_depIdxs = nil
}
